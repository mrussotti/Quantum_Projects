//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkColorEquality\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c0\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":63}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkColorEquality\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkColorEquality\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":83},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ExploringGroversSearchAlgorithm.MarkColorEquality\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkColorEquality\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":83},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsControlled specialization for ExploringGroversSearchAlgorithm.MarkColorEquality\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkColorEquality\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":83},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ExploringGroversSearchAlgorithm.MarkColorEquality\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkValidVertexColoring\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"colorsRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkValidVertexColoring\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkValidVertexColoring\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ExploringGroversSearchAlgorithm.MarkValidVertexColoring\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkValidVertexColoring\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for ExploringGroversSearchAlgorithm.MarkValidVertexColoring\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"MarkValidVertexColoring\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ExploringGroversSearchAlgorithm.MarkValidVertexColoring\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":17}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":17},\"Item2\":{\"Line\":4,\"Column\":20}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ExploringGroversSearchAlgorithm.ApplyMarkingOracleAsPhaseOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":53,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"phaseOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":100}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":53,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":68,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\matth\\\\QuantumWorkspace2\\\\Quantum_Projects\\\\ExploringGroversSearch\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
#line hidden
namespace ExploringGroversSearchAlgorithm
{
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Body, 11, 22)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Adjoint, 11, 22)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Controlled, 11, 22)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.ControlledAdjoint, 11, 22)]
    public partial class MarkColorEquality : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public MarkColorEquality(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MarkColorEquality";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.MarkColorEquality";
        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (c0,c1,target) = __in__;
#line 13 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0__q0__,__qsVar1__q1__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 14 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Apply((__qsVar0__q0__, __qsVar1__q1__));
            }

#line 17 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((c1, target));
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0__q0____,__qsVar1____qsVar1__q1____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((__qsVar0____qsVar0__q0____, __qsVar1____qsVar1__q1____));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (c0,c1,target) = __in__;
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0__q0____,__qsVar1____qsVar1__q1____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Apply((__qsVar0____qsVar0__q0____, __qsVar1____qsVar1__q1____));
            }

#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((c1, target));
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0____qsVar0__q0______,__qsVar1____qsVar1____qsVar1__q1______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((__qsVar0____qsVar0____qsVar0__q0______, __qsVar1____qsVar1____qsVar1__q1______));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(c0,c1,target)) = __in__;
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0__q0__,__qsVar1__q1__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Apply((__qsVar0__q0__, __qsVar1__q1__));
            }

#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (c1, target)));
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0__q0____,__qsVar1____qsVar1__q1____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((__qsVar0____qsVar0__q0____, __qsVar1____qsVar1__q1____));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(c0,c1,target)) = __in__;
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0__q0____,__qsVar1____qsVar1__q1____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Apply((__qsVar0____qsVar0__q0____, __qsVar1____qsVar1__q1____));
            }

#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (c1, target)));
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var (__qsVar0____qsVar0____qsVar0__q0______,__qsVar1____qsVar1____qsVar1__q1______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((c0, c1)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 11 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((__qsVar0____qsVar0____qsVar0__q0______, __qsVar1____qsVar1____qsVar1__q1______));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> c0, IQArray<Qubit> c1, Qubit target)
        {
            return __m__.Run<MarkColorEquality, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((c0, c1, target));
        }
    }

    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Body, 22, 40)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Adjoint, 22, 40)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Controlled, 22, 40)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.ControlledAdjoint, 22, 40)]
    public partial class MarkValidVertexColoring : Unitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public MarkValidVertexColoring(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MarkValidVertexColoring";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.MarkValidVertexColoring";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> MarkColorEquality__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (edges,colorsRegister,target) = __in__;
#line 27 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nEdges = edges.Length;
#line 28 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var colors = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((2L, colorsRegister));
#line hidden
            {
#line 29 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var conflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 31 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)))
#line hidden
                    {
#line 32 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Apply((colors[__qsVar0__start__], colors[__qsVar1__end__], __qsVar2__conflictQubit__));
                    }

#line 35 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((conflictQubits, target));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar0__start____,__qsVar1____qsVar1__end____),__qsVar2____qsVar2__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Adjoint.Apply((colors[__qsVar0____qsVar0__start____], colors[__qsVar1____qsVar1__end____], __qsVar2____qsVar2__conflictQubit____));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(conflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (edges,colorsRegister,target) = __in__;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var __qsVar1__colors__ = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((2L, colorsRegister));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var __qsVar2__conflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar3__start____,__qsVar1____qsVar4__end____),__qsVar2____qsVar5__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Apply((__qsVar1__colors__[__qsVar0____qsVar3__start____], __qsVar1__colors__[__qsVar1____qsVar4__end____], __qsVar2____qsVar5__conflictQubit____));
                    }

#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((__qsVar2__conflictQubits__, target));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar0____qsVar3__start______,__qsVar1____qsVar1____qsVar4__end______),__qsVar2____qsVar2____qsVar5__conflictQubit______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Adjoint.Apply((__qsVar1__colors__[__qsVar0____qsVar0____qsVar3__start______], __qsVar1__colors__[__qsVar1____qsVar1____qsVar4__end______], __qsVar2____qsVar2____qsVar5__conflictQubit______));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar2__conflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(edges,colorsRegister,target)) = __in__;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nEdges = edges.Length;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var colors = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((2L, colorsRegister));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var conflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Apply((colors[__qsVar0__start__], colors[__qsVar1__end__], __qsVar2__conflictQubit__));
                    }

#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (conflictQubits, target)));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar0__start____,__qsVar1____qsVar1__end____),__qsVar2____qsVar2__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, conflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Adjoint.Apply((colors[__qsVar0____qsVar0__start____], colors[__qsVar1____qsVar1__end____], __qsVar2____qsVar2__conflictQubit____));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(conflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(edges,colorsRegister,target)) = __in__;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var __qsVar1__colors__ = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((2L, colorsRegister));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var __qsVar2__conflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar3__start____,__qsVar1____qsVar4__end____),__qsVar2____qsVar5__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Apply((__qsVar1__colors__[__qsVar0____qsVar3__start____], __qsVar1__colors__[__qsVar1____qsVar4__end____], __qsVar2____qsVar5__conflictQubit____));
                    }

#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (__qsVar2__conflictQubits__, target)));
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var ((__qsVar0____qsVar0____qsVar3__start______,__qsVar1____qsVar1____qsVar4__end______),__qsVar2____qsVar2____qsVar5__conflictQubit______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, __qsVar2__conflictQubits__)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 22 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        MarkColorEquality__.Adjoint.Apply((__qsVar1__colors__[__qsVar0____qsVar0____qsVar3__start______], __qsVar1__colors__[__qsVar1____qsVar1____qsVar4__end______], __qsVar2____qsVar2____qsVar5__conflictQubit______));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar2__conflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.MarkColorEquality__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(MarkColorEquality));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<(Int64,Int64)> edges, IQArray<Qubit> colorsRegister, Qubit target)
        {
            return __m__.Run<MarkValidVertexColoring, (IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid>((edges, colorsRegister, target));
        }
    }

    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Body, 40, 54)]
    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Adjoint, 40, 54)]
    public partial class ApplyMarkingOracleAsPhaseOracle : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public ApplyMarkingOracleAsPhaseOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyMarkingOracleAsPhaseOracle";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.ApplyMarkingOracleAsPhaseOracle";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line hidden
            {
#line 44 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 46 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 47 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 49 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    markingOracle.Apply((register, target));
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            {
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    markingOracle.Adjoint.Apply((register, __qsVar0__target__));
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 40 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable markingOracle, IQArray<Qubit> register)
        {
            return __m__.Run<ApplyMarkingOracleAsPhaseOracle, (IAdjointable,IQArray<Qubit>), QVoid>((markingOracle, register));
        }
    }

    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Body, 54, 70)]
    public partial class RunGroversSearch : Operation<(IQArray<Qubit>,IAdjointable,Int64), QVoid>, ICallable
    {
        public RunGroversSearch(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "RunGroversSearch";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.RunGroversSearch";
        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (register,phaseOracle,iterations) = __in__;
#line 55 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 57 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            foreach (var __arg1__ in new QRange(1L, iterations))
#line hidden
            {
#line 58 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                phaseOracle.Apply(register);
#line 60 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 61 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 63 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(register), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(register)));
#line 54 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 54 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, register));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable phaseOracle, Int64 iterations)
        {
            return __m__.Run<RunGroversSearch, (IQArray<Qubit>,IAdjointable,Int64), QVoid>((register, phaseOracle, iterations));
        }
    }

    [SourceLocation("C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs", OperationFunctor.Body, 70, -1)]
    public partial class SolveGraphColoringProblem : Operation<QVoid, QVoid>, ICallable
    {
        public SolveGraphColoringProblem(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SolveGraphColoringProblem";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.SolveGraphColoringProblem";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(SolveGraphColoringProblem));
        protected IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)> MarkValidVertexColoring__
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyMarkingOracleAsPhaseOracle__
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid> RunGroversSearch__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> Microsoft__Quantum__Convert__ResultArrayAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> Microsoft__Quantum__Convert__BoolArrayAsInt
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 72 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nVertices = 5L;
#line 73 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var edges = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (0L, 3L), (1L, 2L), (1L, 3L), (2L, 3L), (3L, 4L));
#line 76 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var markingOracle = MarkValidVertexColoring__.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>((__arg1__) => (edges, __arg1__.Item1, __arg1__.Item2)));
#line 77 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var phaseOracle = ApplyMarkingOracleAsPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg2__) => (markingOracle, __arg2__)));
#line 82 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nQubits = (2L * nVertices);
#line 85 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var searchSpaceSize = 2L.Pow(nQubits);
#line 89 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nSolutions = 72L;
#line 92 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var nIterations = Microsoft__Quantum__Math__Round.Apply(((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance) / 4D) * Microsoft__Quantum__Math__Sqrt.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(searchSpaceSize) / Microsoft__Quantum__Convert__IntAsDouble.Apply(nSolutions)))));
#line 94 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
            var answer = new QArray<Boolean>();
#line hidden
            {
#line 95 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                var (register,output) = (Allocate__.Apply(nQubits), Allocate__.Apply());
#line hidden
                bool __arg3__ = true;
                try
                {
#line 96 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    var isCorrect = false;
#line 97 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    while (true)
                    {
#line 98 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        RunGroversSearch__.Apply((register, phaseOracle, nIterations));
#line 99 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(register);
#line 101 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        markingOracle.Apply((register, output));
#line 102 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        if ((Microsoft__Quantum__Measurement__MResetZ.Apply(output) == Result.One))
                        {
#line 103 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                            isCorrect = true;
#line 104 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                            answer = new QArray<Boolean>(Microsoft__Quantum__Convert__ResultArrayAsBoolArray.Apply(res));
                        }

#line 106 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        ResetAll__.Apply(register);
                        if (isCorrect)
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 109 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    var colorBits = (IQArray<IQArray<Boolean>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Boolean>>>((2L, answer?.Copy()));
#line 110 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    Message__.Apply("The resulting graph coloring:");
#line 111 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                    foreach (var i in new QRange(0L, (nVertices - 1L)))
#line hidden
                    {
#line 112 "C:\\Users\\matth\\QuantumWorkspace2\\Quantum_Projects\\ExploringGroversSearch\\Program.qs"
                        Message__.Apply(String.Format("Vertex {0} - color {1}", i, Microsoft__Quantum__Convert__BoolArrayAsInt.Apply(colorBits[i])));
                    }
                }
#line hidden
                catch
                {
                    __arg3__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg3__)
                    {
#line hidden
                        Release__.Apply(register);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.MarkValidVertexColoring__ = this.__Factory__.Get<IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>>(typeof(MarkValidVertexColoring));
            this.ApplyMarkingOracleAsPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyMarkingOracleAsPhaseOracle));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.RunGroversSearch__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid>>(typeof(RunGroversSearch));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
            this.Microsoft__Quantum__Convert__ResultArrayAsBoolArray = this.__Factory__.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Convert__BoolArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(global::Microsoft.Quantum.Convert.BoolArrayAsInt));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<SolveGraphColoringProblem, QVoid, QVoid>(QVoid.Instance);
        }
    }
}